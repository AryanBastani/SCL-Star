TITLE: [ARTIFACT 23] <Compositional Learning for Interleaving Parallel Automata>

********************************
Getting Started
********************************
1. Our artefact is distributed through a Docker container. The first step is thus to
   install Docker on your machine:

   On Debian & Ubuntu: `sudo apt-get install docker.io`
                    or `sudo apt-get install docker-ce`
   On Arch:            `sudo pacman -S docker`
   On other platforms, please refer to:

       https://docs.docker.com/install/
   We strongly recommend Windows users to use WSL to use docker.

2.  To retrieve our container, download and unzip the artifact file;
    the source code, Dockerfile, and project's jar file are located inside the artifact folder.
    Open a shell/terminal inside the artifact directory. If you are a Windows user, we recommend powerShell of Git Bash.
    to load the image, run:

        docker build --tag cl-star .

    This command creates the docker image "cl-star:latest".

    Now you need to run the image and obtain a shell inside the container with the following command.
    This command also mounts the app/data directory of docker to ./data directory of your computer where input and output files locate.
    (note that you need to run this command from the project repository.)

    run the following command if you use a Linux-based OS:
        docker run  -v "$(pwd)"/data:/app/data -it --entrypoint=/bin/bash cl-star -i

    If you are using powerShell on Windows, run this command:
        docker run -v ${pwd}/data:/app/data -it --entrypoint=/bin/bash cl-star -i

    and run this command if you are Git Bash on Windows:
        docker run -v  "${PWD}/data/":/app/data/ -it --entrypoint bash cl-star -i

    If you insist on using CMD, use need to use absolute address, something like this:
        docker run  -v C:\Users\TeIAS\Desktop\CL-Star-main/data:/app/data -it --entrypoint=/bin/bash cl-star -i

    Some systems ask user to give access to mount the directory, give them this access.


3.  The environment is ready. To re-run our experiment, run (in the docker shell):

        java -cp ./libs/learnlib-distribution-0.16.0-dependencies-bundle.jar:./libs/opencsv-5.6.jar:./libs/slf4j-jdk14-1.7.36.jar:./libs/commons-cli-1.4.jar:cl-star.jar Run_experiment

    This may take one or two hours based on your system specifications. The result of this experiment is accessible in ./data/Results.csv.
    This csv file contains the number of input symbols and resets used for membership queries and equivalence queries.
    It also contains the number of states, input actions, and components for each FSM.
    The results may be a little different each time you run the experiment since our algorithm uses random methods.

    The Summarized results (the tables in the paper) and plots can be obtained in the
    jupyter notebook here: data/Decomposed_Learning_Results.ipynb
    or the google colab notebook here: https://colab.research.google.com/drive/167KaoKKp1GfT24PGRujtBhNYmf33X789?usp=sharing

    If you use google colab, you need to upload the /data/Results.csv file into google colab ("files" tab in the left sidebar).
    To use jupyter notebook, you need to have python and jupyter installed on your computer.
    See this instruction(https://jupyter.org/install) to install them.
    Also, you need to install the Python requirements mentioned in requirement.txt file

    The mentioned notebook contains below items:
        - statistical analysis of data (checking for normal data and t-test)
        - summarizing the output data (tables 1 and 2 in the paper)
        - plotting to illustrate the results (figures 2-4 in the paper)

    You can find more instructions to run your own benchmark or re-build the project in the next section.

    You can close the docker bash with the “exit” command.
********************************
Step-by-step instructions
********************************

=== Run Experiment ===

    The "Run_experiment" class is used to compare L* and CL* algorithms.
    It takes a list of FSM files, and learn them with both algorithms.
    The cost of algorithm in terms of number of input symbols and resets for each fsm will be stored in /data/Results.csv
    You can reproduce tables 1 and 2, and figures 2-4 in the paper using the data/Results.csv and the colab notebook here:
    https://colab.research.google.com/drive/167KaoKKp1GfT24PGRujtBhNYmf33X789?usp=sharing

    The class "Run_Experiments" can be run with the following command:

        java -cp ./libs/learnlib-distribution-0.16.0-dependencies-bundle.jar:./libs/opencsv-5.6.jar:./libs/slf4j-jdk14-1.7.36.jar:./libs/commons-cli-1.4.jar:cl-star.jar Run_experiment

    The input parameters of this class are listed below:
        * -src_dir: Directory of list of input FSMs. Default: data/experiment_benchmarks.txt
        * -eq: Equivalence method, options: wp, w, wrnd, rndWords, rndWordsBig, rndWalk. Default: rndWords
        * -repeat: number of repeating the experiment. Default:3


=== Learn Single FSM  ===
    The "Learn_single_FSM" class is used to learn one single FSM with both algorithms.
    It will print out the learning costs for both algorithms in shell

    The class "Learn_single_FSM" can be run with the following command:

            java -cp ./libs/learnlib-distribution-0.16.0-dependencies-bundle.jar:./libs/opencsv-5.6.jar:./libs/slf4j-jdk14-1.7.36.jar:./libs/commons-cli-1.4.jar:cl-star.jar Learn_single_FSM

        The input parameters of this class are listed below:
            * -src_dir: Directory of list of input FSMs. Defualt: data/sample_fsm.dot
            * -eq: Equivalence method, options: wp, w, wrnd, rndWords, rndWordsBig, rndWalk. defualt: rndWords

The input FSM file should be a .dot file which has a similar content as data/sample_fsm.dot file.
Each line in .dot file represents a transition in the FSM, and the initial state is always S0.
********************************
Rebuild the Project
********************************
    To rebuild the project, run following commands:

        javac -d build -cp "libs/*" -Xlint:unchecked src/*.java

        cd build
        jar cvf ../cl-star.jar *.class
        cd ..

    The jar file of the project will be at ./cl-star.jar
